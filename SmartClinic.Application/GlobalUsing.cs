global using System.IdentityModel.Tokens.Jwt;
global using System.Security.Claims;
global using System.Text;
global using System.Text.RegularExpressions;
global using FluentValidation;
global using Microsoft.AspNetCore.Http;
global using Microsoft.AspNetCore.Identity;
global using Microsoft.EntityFrameworkCore;
global using Microsoft.Extensions.Configuration;
global using Microsoft.Extensions.DependencyInjection;
global using Microsoft.Extensions.Options;
global using Microsoft.IdentityModel.Tokens;
global using Newtonsoft.Json;
global using SendGrid;
global using SendGrid.Helpers.Mail;
global using SmartClinic.Application.Bases;
global using SmartClinic.Application.Features.Appointments.Command.CreateAppointment;
global using SmartClinic.Application.Features.Appointments.Command.UpdateAppointmnet;
global using SmartClinic.Application.Features.Appointments.Mapper;
global using SmartClinic.Application.Features.Appointments.Query.AllAppointments;
global using SmartClinic.Application.Features.Appointments.Query.DoctorAppointments;
global using SmartClinic.Application.Features.Appointments.Query.PatientAppointments;
global using SmartClinic.Application.Features.Auth;
global using SmartClinic.Application.Features.Auth.Command;
global using SmartClinic.Application.Features.Doctors.Command.CreateDoctor;
global using SmartClinic.Application.Features.Doctors.Command.UpdateDoctor;
global using SmartClinic.Application.Features.Doctors.Mapper;
global using SmartClinic.Application.Features.Doctors.Query.GetDoctor;
global using SmartClinic.Application.Features.Doctors.Query.GetDoctors;
global using SmartClinic.Application.Features.Doctors.Query.GetDoctorWithSchedulesSlots;
global using SmartClinic.Application.Features.DoctorsSchedules.Command.CreateDoctorSchedule;
global using SmartClinic.Application.Features.DoctorsSchedules.Command.DeleteDoctorSchedule;
global using SmartClinic.Application.Features.DoctorsSchedules.DTOs;
global using SmartClinic.Application.Features.DoctorsSchedules.Mapper;
global using SmartClinic.Application.Features.DoctorsSchedules.Query.GetDoctorSchedule;
global using SmartClinic.Application.Features.Patients.Query.GetPatient;
global using SmartClinic.Application.Features.Patients.Query.GetPatients;
global using SmartClinic.Application.Features.Profile.Command;
global using SmartClinic.Application.Features.Profile.Query;
global using SmartClinic.Application.Features.Specializations.Command.CreateSpecialization;
global using SmartClinic.Application.Features.Specializations.Mapper;
global using SmartClinic.Application.Features.Specializations.Query.GetSpecialization;
global using SmartClinic.Application.Features.Specializations.Query.GetSpecializations;
global using SmartClinic.Application.Models;
global using SmartClinic.Application.Services.Implementation;
global using SmartClinic.Application.Services.Implementation.FileHandlerService;
global using SmartClinic.Application.Services.Implementation.FileHandlerService.Command;
global using SmartClinic.Application.Services.Implementation.Profile;
global using SmartClinic.Application.Services.Implementation.Specifications.AppointmentSpecifications.AllAppointmentsSpecifications;
global using SmartClinic.Application.Services.Implementation.Specifications.AppointmentSpecifications.CancelAppointmentSpecifications;
global using SmartClinic.Application.Services.Implementation.Specifications.AppointmentSpecifications.CreateAppointmentSpecifications;
global using SmartClinic.Application.Services.Implementation.Specifications.AppointmentSpecifications.GetDoctorAppointmentsSpecifications;
global using SmartClinic.Application.Services.Implementation.Specifications.AppointmentSpecifications.GetPatientAppointmentsSpecifications;
global using SmartClinic.Application.Services.Implementation.Specifications.AppointmentSpecifications.UpdateDoctorAppointmentSpecifications;
global using SmartClinic.Application.Services.Implementation.Specifications.DoctorSchedulesSpecifications.CreateDoctorSchedulesSpecifications;
global using SmartClinic.Application.Services.Implementation.Specifications.DoctorSchedulesSpecifications.DeleteDoctorSchedulesSpecifications;
global using SmartClinic.Application.Services.Implementation.Specifications.DoctorSpecifications.DeleteDoctorSpecifications;
global using SmartClinic.Application.Services.Implementation.Specifications.DoctorSpecifications.GetDoctorByIdSpecifications;
global using SmartClinic.Application.Services.Implementation.Specifications.DoctorSpecifications.GetDoctors;
global using SmartClinic.Application.Services.Implementation.Specifications.DoctorSpecifications.GetDoctorWithSchedulesSlots;
global using SmartClinic.Application.Services.Implementation.Specifications.DoctorSpecifications.UpdateDoctorSpecifications;
global using SmartClinic.Application.Services.Implementation.Specifications.PatientSpecifications.GetPatients;
global using SmartClinic.Application.Services.Implementation.Specifications.SpecializationSpecifications.CreateSpecializationsSpecification;
global using SmartClinic.Application.Services.Implementation.Specifications.SpecializationSpecifications.DeleteSpecializationSpecifications;
global using SmartClinic.Application.Services.Implementation.Specifications.SpecializationSpecifications.GetSpecializationByIdSpecifications;
global using SmartClinic.Application.Services.Implementation.Specifications.SpecializationSpecifications.GetSpecializationsSpecifications;
global using SmartClinic.Application.Services.Interfaces;
global using SmartClinic.Application.Services.Interfaces.Email;
global using SmartClinic.Application.Services.Interfaces.InfrastructureInterfaces;
global using SmartClinic.Domain.DTOs.Auth;
global using SmartClinic.Domain.Entities;
global using SmartClinic.Domain.Entities.AppointmentAggregation;

