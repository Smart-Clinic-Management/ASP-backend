using Microsoft.Extensions.Options;
using Newtonsoft.Json;
using System.Text;

namespace SmartClinic.Application.Services.Implementation
{
    public class GeminiService : IGeminiService
    {
        private readonly HttpClient _httpClient;
        private readonly GeminiApiSettings _apiSettings;
        private const string BASE_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

        public GeminiService(HttpClient httpClient, IOptions<GeminiApiSettings> apiSettings)
        {
            _httpClient = httpClient;
            _apiSettings = apiSettings.Value;
        }

        public async Task<string> ProcessRequestAsync(string inputText, string language)
        {
            var apiKey = _apiSettings.ApiKey;
            if (string.IsNullOrEmpty(apiKey))
            {
                throw new InvalidOperationException(language == "ar"
                    ? "مفتاح API غير مُعد في ملف appsettings.json"
                    : "API key is not configured in appsettings.json");
            }

            var requestUrl = $"{BASE_URL}?key={apiKey}";
            var request = new GeminiRequest();

            if (!string.IsNullOrEmpty(inputText))
            {
                var content = new Content();
                content.Parts.Add(new Part
                {
                    Text = inputText
                });
                request.Contents.Add(content);
            }
            else
            {
                throw new InvalidOperationException(language == "ar"
                    ? "النص المدخل لا يمكن أن يكون فارغًا."
                    : "Input text cannot be null or empty.");
            }

            Console.WriteLine($"Contents: {JsonConvert.SerializeObject(request.Contents)}");

            var jsonRequest = JsonConvert.SerializeObject(request);
            Console.WriteLine($"Request Body: {jsonRequest}");
            var jsonContent = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

            try
            {
                var response = await _httpClient.PostAsync(requestUrl, jsonContent);
                var jsonResponse = await response.Content.ReadAsStringAsync();

                if (!response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Error Response: {jsonResponse}");
                    throw new HttpRequestException(language == "ar"
                        ? "فشل الطلب إلى API. تحقق من المدخلات."
                        : "API request failed. Please check the inputs.");
                }

                var geminiResponse = JsonConvert.DeserializeObject<GeminiResponse>(jsonResponse);

                if (geminiResponse?.Candidates != null && geminiResponse.Candidates.Count > 0)
                {
                    return geminiResponse.Candidates[0].Content.Parts[0].Text.TrimEnd();
                }

                return language == "ar"
                    ? "لم يتم إنشاء محتوى من قبل API."
                    : "No response content generated by the API.";
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception: {ex.Message}");
                return language == "ar"
                    ? $"خطأ: {ex.Message}"
                    : $"Error: {ex.Message}";
            }
        }

        public async Task<string> ExtractKeywordAsync(string question)
        {
            var medicalKeywords = new List<string>
            {
                "مرض", "علاج", "أعراض", "دواء", "تشخيص", "طبيب", "جراحة", "سكري", "ضغط الدم", "فيروس", "عدوى",
                "disease", "treatment", "symptoms", "medicine", "diagnosis", "doctor", "surgery", "diabetes", "blood pressure", "virus", "infection"
            };

            bool isMedicalQuestion = medicalKeywords.Any(keyword => question.Contains(keyword, StringComparison.OrdinalIgnoreCase));

            if (!isMedicalQuestion)
            {
                return IsArabic(question)
                    ? "هذا السؤال غير متعلق بالطب. يرجى طرح سؤال طبي."
                    : "This question is not related to medical topics. Please ask a medical question.";
            }

            string language = IsArabic(question) ? "ar" : "en";
            var response = await ProcessRequestAsync(question, language);

            return response.TrimEnd();
        }

        private bool IsArabic(string text)
        {
            return text.Any(c => c >= 0x0600 && c <= 0x06FF);
        }

        private async Task<byte[]> ConvertToByteArrayAsync(IFormFile file)
        {
            using (var memoryStream = new MemoryStream())
            {
                await file.CopyToAsync(memoryStream);
                return memoryStream.ToArray();
            }
        }

        public async Task<string> ProcessRequestAsync(string inputText, IFormFile imageFile, IFormFile documentFile)
        {
            return await Task.FromResult("This method is not implemented for file processing.");
        }

        public Task<string> ProcessRequestAsync(string inputText, IFormFile imageFile, IFormFile documentFile, string language)
        {
            throw new NotImplementedException();
        }

        public string DetectLanguage(string inputText)
        {
            return IsArabic(inputText) ? "ar" : "en";
        }
    }

    public class GeminiRequest
    {
        [JsonProperty("contents")]
        public List<Content> Contents { get; set; } = new List<Content>();
    }

    public class Content
    {
        [JsonProperty("parts")]
        public List<Part> Parts { get; set; } = new List<Part>();
    }

    public class Part
    {
        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public class GeminiResponse
    {
        public List<Candidate> Candidates { get; set; }
    }

    public class Candidate
    {
        public Content Content { get; set; }
    }

    public class GeminiApiSettings
    {
        public string ApiKey { get; set; }
    }
}
