namespace SmartClinic.Application.Services.Implementation;

public class GeminiService : IGeminiService
{
    private readonly HttpClient _httpClient;
    private readonly GeminiApiSettings _apiSettings;
    private readonly IDoctorService _doctorService;
    private const string BASE_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

    public GeminiService(HttpClient httpClient, IOptions<GeminiApiSettings> apiSettings, IDoctorService doctorService)
    {
        _httpClient = httpClient;
        _apiSettings = apiSettings.Value;
        _doctorService = doctorService;
    }

    public async Task<string> ProcessRequestAsync(string inputText, string language)
    {
        var apiKey = _apiSettings.ApiKey;
        if (string.IsNullOrEmpty(apiKey))
        {
            throw new InvalidOperationException(language == "ar"
                ? "مفتاح API غير مُعد في ملف appsettings.json"
                : "API key is not configured in appsettings.json");
        }

        var requestUrl = $"{BASE_URL}?key={apiKey}";
        var request = new GeminiRequest();

        if (!string.IsNullOrEmpty(inputText))
        {
            var content = new Content();
            content.Parts.Add(new Part { Text = inputText });
            request.Contents.Add(content);
        }
        else
        {
            throw new InvalidOperationException(language == "ar"
                ? "النص المدخل لا يمكن أن يكون فارغًا."
                : "Input text cannot be null or empty.");
        }

        var jsonRequest = JsonConvert.SerializeObject(request);
        var jsonContent = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

        try
        {
            var response = await _httpClient.PostAsync(requestUrl, jsonContent);
            var jsonResponse = await response.Content.ReadAsStringAsync();

            if (!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException(language == "ar"
                    ? "فشل الطلب إلى API. تحقق من المدخلات."
                    : "API request failed. Please check the inputs.");
            }

            var geminiResponse = JsonConvert.DeserializeObject<GeminiResponse>(jsonResponse);

            if (geminiResponse?.Candidates != null && geminiResponse.Candidates.Count > 0)
            {
                return geminiResponse.Candidates[0].Content.Parts[0].Text.TrimEnd();
            }

            return language == "ar"
                ? "لم يتم إنشاء محتوى من قبل API."
                : "No response content generated by the API.";
        }
        catch (Exception ex)
        {
            return language == "ar"
                ? $"خطأ: {ex.Message}"
                : $"Error: {ex.Message}";
        }
    }

    public async Task<string> ExtractKeywordAsync(string question)
    {
        var medicalKeywords = new List<string>
        {
            "مرض", "علاج", "أعراض", "دواء", "تشخيص", "طبيب", "جراحة", "سكري",
            "ضغط الدم", "فيروس", "عدوى", "التهاب", "نزيف", "حرارة", "حساسية", "آلام",
            "كحة", "سعال", "صداع", "ورم", "إسهال", "قيء", "غثيان", "جلدية", "تنفس"
        };

        var greetings = new List<string> { "مرحباً", "أهلاً", "صباح الخير", "مساء الخير", "كيف حالك", "hello", "hi", "good morning", "good evening" };

        string language = DetectLanguage(question);

        if (greetings.Any(greeting => question.Contains(greeting, StringComparison.OrdinalIgnoreCase)))
        {
            return language == "ar" ? "أهلاً وسهلاً! كيف يمكنني مساعدتك اليوم؟" : "Hello! How can I assist you today?";
        }
        else if (Regex.IsMatch(question, @"\b(الدكاترة|الأطباء|doctors)\b", RegexOptions.IgnoreCase))
        {
            var doctors = await GetAllDoctorsAsync(language);
            return JsonConvert.SerializeObject(doctors, Formatting.Indented);
        }
        else if (Regex.IsMatch(question, @"\b(جلدية|أسنان|أطفال|باطنة|جراحة|عيون|dermatologist|dentist|pediatrician|internal medicine|surgeon|ophthalmologist|eye doctor)\b", RegexOptions.IgnoreCase))
        {
            string specialization = Regex.Match(question, @"\b(جلدية|أسنان|أطفال|باطنة|جراحة|عيون|dermatologist|dentist|pediatrician|internal medicine|surgeon|ophthalmologist|eye doctor)\b", RegexOptions.IgnoreCase).Value;
            var specializationTranslated = TranslateSpecialization(specialization.ToLower());
            var doctors = await GetDoctorsBySpecializationAsync(specializationTranslated, language);
            return JsonConvert.SerializeObject(doctors, Formatting.Indented);
        }
        else if (Regex.IsMatch(question, @"(?:دكتور|الدكتور|Dr\.?|doctor)\s+(\w+)", RegexOptions.IgnoreCase))
        {
            var match = Regex.Match(question, @"(?:دكتور|الدكتور|Dr\.?|doctor)\s+(\w+)", RegexOptions.IgnoreCase);
            string doctorName = match.Groups[1].Value;
            var doctors = await GetDoctorsByNameAsync(doctorName, language);
            return JsonConvert.SerializeObject(doctors, Formatting.Indented);
        }
        else if (medicalKeywords.Any(keyword => question.Contains(keyword, StringComparison.OrdinalIgnoreCase)))
        {
            return await ProcessRequestAsync(question, language);
        }

        return language == "ar"
            ? "هذا السؤال غير متعلق بالطب. يرجى طرح سؤال طبي."
            : "This question is not related to medical topics. Please ask a medical question.";
    }

    private string TranslateSpecialization(string input)
    {
        var dict = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
        {
            { "جلدية", "Dermatology" },
            { "أسنان", "Dentistry" },
            { "أطفال", "Pediatrics" },
            { "باطنة", "Internal Medicine" },
            { "جراحة", "Surgery" },
            { "عيون", "Ophthalmology" },
            { "dermatologist", "Dermatology" },
            { "dentist", "Dentistry" },
            { "pediatrician", "Pediatrics" },
            { "internal medicine", "Internal Medicine" },
            { "surgeon", "Surgery" },
            { "ophthalmologist", "Ophthalmology" },
            { "eye doctor", "Ophthalmology" }
        };
        return dict.TryGetValue(input, out var translated) ? translated : input;
    }

    public async Task<string> GetDoctorByIdAsync(int doctorId, string language)
    {
        var response = await _doctorService.GetDoctorByIdAsync(doctorId);
        if (response.StatusCode == System.Net.HttpStatusCode.NotFound || response.Data == null)
        {
            return JsonConvert.SerializeObject(new
            {
                Id = doctorId,
                Message = language == "ar" ? $"لا يوجد طبيب بالمعرف {doctorId}." : $"No doctor found with ID {doctorId}."
            }, Formatting.Indented);
        }

        var doctorDetails = new
        {
            Id = doctorId,
            Name = $"{response.Data.FirstName} {response.Data.LastName}",
            Age = response.Data.Age,
            Specialization = response.Data.Specialization ?? "غير محدد",
            Description = response.Data.Description ?? "لا توجد تفاصيل إضافية"
        };

        return JsonConvert.SerializeObject(doctorDetails, Formatting.Indented);
    }

    public async Task<List<GetAllDoctorsResponse>> GetAllDoctorsAsync(string language, string doctorName = null, string specialization = null, int pageNumber = 1, int pageSize = 10)
    {
        var getAllDoctorsParams = new GetAllDoctorsParams
        {
            DoctorName = doctorName,
            Specialization = specialization,
            PageSize = pageSize,
        };

        var response = await _doctorService.GetAllDoctorsAsync(getAllDoctorsParams);
        if (response.StatusCode == System.Net.HttpStatusCode.NotFound || response.Data == null)
        {
            return [];
        }

        return response.Data?.Data?.ToList() ?? [];
    }

    private bool IsArabic(string text)
    {
        return text.Any(c => c >= 0x0600 && c <= 0x06FF);
    }

    public string DetectLanguage(string inputText)
    {
        return IsArabic(inputText) ? "ar" : "en";
    }

    public async Task<string> ProcessImageAsync(IFormFile imageFile, string language)
    {
        if (imageFile == null)
        {
            return language == "ar" ? "الصورة غير موجودة." : "Image not provided.";
        }

        return language == "ar" ? "تم معالجة الصورة بنجاح." : "Image processed successfully.";
    }

    public async Task<string> ProcessDocumentAsync(IFormFile documentFile, string language)
    {
        if (documentFile == null)
        {
            return language == "ar" ? "المستند غير موجود." : "Document not provided.";
        }

        return language == "ar" ? "تم معالجة المستند بنجاح." : "Document processed successfully.";
    }

    public async Task<string> GetDoctorInformationAsync(string inputText)
    {
        return await ProcessRequestAsync(inputText, DetectLanguage(inputText));
    }

    public async Task<List<GetAllDoctorsResponse>> GetDoctorsBySpecializationAsync(string specialization, string language)
    {
        var getAllDoctorsParams = new GetAllDoctorsParams
        {
            Specialization = specialization,
            PageSize = 10,
        };

        var response = await _doctorService.GetAllDoctorsAsync(getAllDoctorsParams);
        if (response.StatusCode == System.Net.HttpStatusCode.NotFound || response.Data == null)
        {
            return [];
        }

        return response.Data?.Data?.ToList() ?? [];
    }

    public async Task<List<GetAllDoctorsResponse>> GetDoctorsByNameAsync(string name, string language)
    {
        var getAllDoctorsParams = new GetAllDoctorsParams
        {
            DoctorName = name,
            PageSize = 10,
        };

        var response = await _doctorService.GetAllDoctorsAsync(getAllDoctorsParams);
        if (response.StatusCode == System.Net.HttpStatusCode.NotFound || response.Data == null)
        {
            return [];
        }

        return response.Data?.Data?.ToList() ?? [];
    }
}

public class GeminiRequest
{
    [JsonProperty("contents")]
    public List<Content> Contents { get; set; } = [];
}

public class Content
{
    [JsonProperty("parts")]
    public List<Part> Parts { get; set; } = [];
}

public class Part
{
    [JsonProperty("text")]
    public string Text { get; set; }
}

public class GeminiResponse
{
    public List<Candidate> Candidates { get; set; }
}

public class Candidate
{
    public Content Content { get; set; }
}

public class GeminiApiSettings
{
    public string ApiKey { get; set; }
}
